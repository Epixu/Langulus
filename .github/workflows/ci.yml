name: Langulus CI
on: push
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
  
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        build: [Release]
        arch: [x86, x64]
        testing: [ON]
        cxx: [ClangCl]
        feature: [
          [NoSIMD, 16, ' ', ' '],
          [SSE2, 16, '-msse2', '/arch:SSE2'],
          [SSE3, 16, '-msse3', '<not available on msvc>'],
          [SSSE3, 16, '-mssse3', '<not available on msvc>'],
          [SSE4.1, 16, '-msse4.1', '<not available on msvc>'],
          [SSE4.2, 16, '-msse4.2', '<not available on msvc>'],
          [AVX, 32, '-mavx', '/arch:AVX'],
          [AVX2, 32, '-mavx2', '/arch:AVX2'],
          [AVX512, 64, '-mavx512f', '/arch:AVX512']
        ]

        exclude:
          - os: ubuntu-22.04
            cxx: v143
          - os: ubuntu-22.04
            cxx: ClangCl
          - os: windows-latest
            cxx: g++
          - os: windows-latest
            cxx: clang++-17

          - arch: x64
            cxx: ClangCl
            feature: [SSE2, 16, '-msse2', '/arch:SSE2']
          - arch: x64
            cxx: ClangCl
            feature: [SSE3, 16, '-msse3', '<not available on msvc>']
          - arch: x64
            cxx: ClangCl
            feature: [SSSE3, 16, '-mssse3', '<not available on msvc>']
          - arch: x64
            cxx: ClangCl
            feature: [SSE4.1, 16, '-msse4.1', '<not available on msvc>']
          - arch: x64
            cxx: ClangCl
            feature: [SSE4.2, 16, '-msse4.2', '<not available on msvc>']

          - arch: x86
            cxx: ClangCl
            feature: [SSE3, 16, '-msse3', '<not available on msvc>']
          - arch: x86
            cxx: ClangCl
            feature: [SSSE3, 16, '-mssse3', '<not available on msvc>']
          - arch: x86
            cxx: ClangCl
            feature: [SSE4.1, 16, '-msse4.1', '<not available on msvc>']
          - arch: x86
            cxx: ClangCl
            feature: [SSE4.2, 16, '-msse4.2', '<not available on msvc>']

          - arch: x64
            cxx: v143
            feature: [SSE2, 16, '-msse2', '/arch:SSE2']
          - arch: x64
            cxx: v143
            feature: [SSE3, 16, '-msse3', '<not available on msvc>']
          - arch: x64
            cxx: v143
            feature: [SSSE3, 16, '-mssse3', '<not available on msvc>']
          - arch: x64
            cxx: v143
            feature: [SSE4.1, 16, '-msse4.1', '<not available on msvc>']
          - arch: x64
            cxx: v143
            feature: [SSE4.2, 16, '-msse4.2', '<not available on msvc>']

          - arch: x86
            cxx: v143
            feature: [SSE3, 16, '-msse3', '<not available on msvc>']
          - arch: x86
            cxx: v143
            feature: [SSSE3, 16, '-mssse3', '<not available on msvc>']
          - arch: x86
            cxx: v143
            feature: [SSE4.1, 16, '-msse4.1', '<not available on msvc>']
          - arch: x86
            cxx: v143
            feature: [SSE4.2, 16, '-msse4.2', '<not available on msvc>']

          # Seems the cloud at github doesn't have the avx512 extensions
          - feature: [AVX512, 64, '-mavx512f', '/arch:AVX512']

        include:
          - cxx: g++
            c: gcc
          - cxx: clang++-17
            c: clang-17
          - os: ubuntu-22.04
            arch: x86
            cmake_args: "-DCMAKE_CXX_FLAGS=-m32"
          - os: ubuntu-22.04
            arch: x64
            cmake_args: "-DCMAKE_CXX_FLAGS=-m64"
          - os: windows-latest
            arch: x86
            cmake_args: "-G \"Visual Studio 17 2022\" -A Win32"
          - os: windows-latest
            arch: x64
            cmake_args: "-G \"Visual Studio 17 2022\" -A x64"

    name: "${{matrix.os}}-${{matrix.cxx}}-${{matrix.arch}}-${{matrix.feature[0]}}-testing${{matrix.testing}}"
    runs-on: ${{matrix.os}}
    steps:
      - name: Clone
        uses: actions/checkout@v4

      - if: matrix.os == 'ubuntu-22.04' && matrix.arch == 'x86'
        name: Prepare Linux for cross-compilation
        run: |
          sudo apt update
          sudo apt install g++-multilib

      - if: matrix.cxx == 'clang++-17'
        name: Installing Clang 17
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-17 main"
          sudo apt update
          sudo apt install clang-17

      #- if: matrix.os == 'ubuntu-22.04'
      #  name: Install dependencies on Linux
      #  run: |
      #    sudo apt update
      #    sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev

      - if: matrix.os == 'ubuntu-22.04'
        name: Configure (Linux)
        run: >
          mkdir build && cd build && cmake ..
          -DCMAKE_C_COMPILER=${{matrix.c}}
          -DCMAKE_CXX_COMPILER=${{matrix.cxx}}
          ${{matrix.cmake_args}} 
          -DCMAKE_BUILD_TYPE=${{matrix.build}}
          -DCMAKE_C_FLAGS="${{matrix.feature[2]}}"
          -DCMAKE_CXX_FLAGS="${{matrix.feature[2]}}"
          -DLANGULUS_ALIGNMENT=${{matrix.feature[1]}}
          -DLANGULUS_TESTING=${{matrix.testing}}

      - if: matrix.os == 'windows-latest' && matrix.cxx == 'v143'
        name: Configure (Windows, MSVC)
        run: >
          mkdir build && cd build && cmake ..
          ${{matrix.cmake_args}} -T "${{matrix.cxx}}"
          -DCMAKE_BUILD_TYPE=${{matrix.build}}
          -DCMAKE_CXX_FLAGS="${{matrix.feature[3]}} /EHsc"
          -DLANGULUS_ALIGNMENT=${{matrix.feature[1]}}
          -DLANGULUS_TESTING=${{matrix.testing}}

      - if: matrix.os == 'windows-latest' && matrix.cxx == 'ClangCl' && matrix.arch == 'x86'
        name: Configure (Windows, ClangCl, x86)
        run: >
          choco install --no-progress ninja &&
          cmd /c "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat" -arch=x86 &&
          mkdir build && cd build && cmake ..
          -G "Ninja"
          -DCMAKE_C_COMPILER=clang-cl
          -DCMAKE_CXX_COMPILER=clang-cl
          -DCMAKE_MT="C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x86/mt.exe"
          -DCMAKE_BUILD_TYPE=${{matrix.build}}
          -DCMAKE_C_FLAGS="${{matrix.feature[3]}} /EHsc -m32"
          -DCMAKE_CXX_FLAGS="${{matrix.feature[3]}} /EHsc -m32"
          -DLANGULUS_ALIGNMENT=${{matrix.feature[1]}}
          -DLANGULUS_TESTING=${{matrix.testing}}

      - if: matrix.os == 'windows-latest' && matrix.cxx == 'ClangCl' && matrix.arch == 'x64'
        name: Configure (Windows, ClangCl, x64)
        run: >
          choco install --no-progress ninja &&
          cmd /c "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat" -arch=x64 &&
          mkdir build && cd build && cmake ..
          -G "Ninja"
          -DCMAKE_C_COMPILER=clang-cl
          -DCMAKE_CXX_COMPILER=clang-cl
          -DCMAKE_MT="C:/Program Files (x86)/Windows Kits/10/bin/10.0.19041.0/x64/mt.exe"
          -DCMAKE_BUILD_TYPE=${{matrix.build}}
          -DCMAKE_C_FLAGS="${{matrix.feature[3]}} /EHsc -m64"
          -DCMAKE_CXX_FLAGS="${{matrix.feature[3]}} /EHsc -m64"
          -DLANGULUS_ALIGNMENT=${{matrix.feature[1]}}
          -DLANGULUS_TESTING=${{matrix.testing}}

      - name: Build
        run: cmake --build build -j4 --config ${{matrix.build}}

      - name: Test
        run: cd build && ctest -V -C ${{matrix.build}}
        
      - name: 'Upload artifacts'
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: "logfile-${{matrix.os}}-${{matrix.cxx}}-${{matrix.arch}}-${{matrix.feature[0]}}-testing${{matrix.testing}}.htm"
          path: build/bin/logfile.htm
          retention-days: 5